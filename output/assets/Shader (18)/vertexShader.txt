uniform float edgeWidthRatio;
uniform bool edge;
uniform vec3 lightPosition;
 varying vec2 vUv;
 varying vec3 vEyeDirection;
varying vec3 vLightDirection;
void main(){
 vec3 pos = (modelMatrix * vec4(position, 1.0)).xyz;
      if(edge){
           pos += normal * edgeWidthRatio;  
         }else{
           vec3 eye = cameraPosition - pos;
           vec3 light = lightPosition - pos;
           vec3 t = normalize(cross(normal, vec3(0.0, 1.0, 0.0)));
           vec3 b = cross(normal, t);
           vEyeDirection = normalize(vec3(dot(t, eye), dot(b, eye), dot(normal, eye)));
           vLightDirection = normalize(vec3(dot(t, light), dot(b,light), dot(normal,light)));
           vUv = uv;
         }
         gl_Position = projectionMatrix * modelViewMatrix * vec4(pos, 1.0);
}